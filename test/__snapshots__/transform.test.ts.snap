// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transforms > Should not add a statement terminator if expression comes after if statement 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default withAsyncContext(async () => {let __temp, __restore;
  if(false) (([__temp,__restore]=__executeAsync(()=>something())),__temp=await __temp,__restore(),__temp)
},1)
"
`;

exports[`transforms > transforms 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default withAsyncContext(async () => {let __temp, __restore;
  const ctx1 = useSomething()
  ;(([__temp,__restore]=__executeAsync(()=>something())),await __temp,__restore());
  const ctx2 = useSomething()
},1)
"
`;

exports[`transforms > transforms await as variable 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default withAsyncContext(async () => {let __temp, __restore;
  const foo = (([__temp,__restore]=__executeAsync(()=>something())),__temp=await __temp,__restore(),__temp)
  const bar = hello((([__temp,__restore]=__executeAsync(()=>something())),__temp=await __temp,__restore(),__temp))
  const ctx = useSomething()
},1)
"
`;

exports[`transforms > transforms await in nested scopes 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default withAsyncContext(async () => {let __temp, __restore;
  for (const i of foo) {
    if (i) {
      ;(([__temp,__restore]=__executeAsync(()=>i())),await __temp,__restore());
    }
  }
  const ctx = useSomething()
},1)
"
`;

exports[`transforms > transforms await in try-catch 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default withAsyncContext(async () => {let __temp, __restore;
  let user;

  try {
    user = (([__temp,__restore]=__executeAsync(()=>fetchUser())),__temp=await __temp,__restore(),__temp);
  } catch (e) {
    user = null;
  }

  if (!user)
    return navigateTo('/');
},1)
"
`;

exports[`transforms > transforms certain keys of an object 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default defineSomething({
  someKey: async () => {let __temp, __restore;
    const ctx1 = useSomething()
    ;(([__temp,__restore]=__executeAsync(()=>something())),await __temp,__restore());
    const ctx2 = useSomething()
  },
  async someKey () {let __temp, __restore;
    const ctx1 = useSomething()
    ;(([__temp,__restore]=__executeAsync(()=>something())),await __temp,__restore());
    const ctx2 = useSomething()
  },
  ...someKey,
  someKey: 421,
  someKey () {
    const ctx1 = useSomething()
    const ctx2 = useSomething()
  },
  async someOtherKey () {
    const ctx1 = useSomething()
    await something()
    const ctx2 = useSomething()
  }
})
"
`;

exports[`transforms > transforms dot usage 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default ctx.callAsync(async () => {let __temp, __restore;
  const ctx1 = useSomething()
  ;(([__temp,__restore]=__executeAsync(()=>something())),await __temp,__restore());
  const ctx2 = useSomething()
})
"
`;

exports[`transforms > transforms dot usage 2`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default x.ctx.callAsync(async () => {let __temp, __restore;
  const ctx1 = useSomething()
  ;(([__temp,__restore]=__executeAsync(()=>something())),await __temp,__restore());
  const ctx2 = useSomething()
})
"
`;

exports[`transforms > transforms multiple awaits in same chunk 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default withAsyncContext(async () => {let __temp, __restore;
  ;(([__temp,__restore]=__executeAsync(()=>writeConfig((([__temp,__restore]=__executeAsync(()=>readConfig())),__temp=await __temp,__restore(),__temp)))),await __temp,__restore());
},1)
"
`;

exports[`transforms > transforms validly nested functions 1`] = `
"import { executeAsync as __executeAsync } from "unctx";
export default withAsyncContext(async () => {let __temp, __restore;
  ;(([__temp,__restore]=__executeAsync(()=>something())),await __temp,__restore());

  withAsyncContext(async () => {let __temp, __restore;
    ;(([__temp,__restore]=__executeAsync(()=>something())),await __temp,__restore());
  },1)

  const ctx = useSomething()
},1)
"
`;
